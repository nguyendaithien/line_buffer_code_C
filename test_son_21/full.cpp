#include"full.h"
#include <iostream>
#include <hls_stream.h>
#include "defines.h"
#include "activation.h"
int count_img =0;
int count_conv1 =0;

data_t bias_conv1[16]={0.000998553, 0.08829625,0.07215472,0.04322089,0.000511708,-0.000338764,
    0.33033448,0.08273578,0.029430622,0.032025397,0.000527582,0.29062834,0.07009841,
    -0.000225344,0.000493296,0.050996434};

template<typename T>
void sp_conv1(int padding,int width, int height, hls::stream<T> &src,T ker[NUM_FILTERS_1][K][K], hls::stream<T> &dst) {
    height = height + 2*padding;
    width  = width + 2*padding;
    T linebuf[K - 1][IMG_WIDTH+2];
    #pragma HLS ARRAY_PARTITION variable=linebuf complete dim=1
    T win[K][K];
    #pragma HLS ARRAY_PARTITION variable=win complete dim=0
    #pragma HLS ARRAY_PARTITION variable=ker complete dim=0
    #pragma HLS INLINE // Into a DATAFLOW region

     ImgH:for (int img_row = 0; img_row < height; img_row++) {
        ImgW:for (int img_col = 0; img_col < width; img_col++) {
            #pragma HLS DEPENDENCE variable=linebuf inter false 
            #pragma HLS PIPELINE
            T in_val;
            if (img_row == 0 || img_col == 0 || img_row == (IMG_HEIGHT+1) || img_col == (IMG_WIDTH+1)) {
                in_val = 0;
            } else {
                in_val = src.read();
            }

            if (img_row >= K - 1){

            // Shift values in the window horizontally
            
             ShiftWindowH:for (int win_row = 0; win_row < K; win_row++) {
                 ShiftWindowW:for (int win_col = 0; win_col < K; win_col++) {
                    #pragma HLS PIPELINE
                    if (win_row < K - 1) {
                        win[win_row][win_col] = (win_col < K - 1) ? win[win_row][win_col + 1] : linebuf[win_row][img_col];
                    } else if (win_row == K - 1) {
                        win[win_row][win_col] = (win_col < K - 1) ? win[win_row][win_col + 1] : in_val;
                    }
                }
            }
            
            // Convolution operation
            Filters:for (int num_filters = 0; num_filters < NUM_FILTERS_1; num_filters++) {
                Conv:if (img_col >= K - 1) {
                    T data = 0;
                    ConvH:for (int win_row = 0; win_row < K; win_row++) {
                        ConvW:for (int win_col = 0; win_col < K; win_col++) {
                            #pragma HLS PIPELINE
                            data += win[win_row][win_col] * ker[num_filters][win_row][win_col];
                        }
                    }
                    data += bias_conv1[num_filters];  
                    dst << relu(data);
                    count_conv1 ++;
                }
            }
        }

            // Shift values in line buffer vertically
            ShiftLineBuffer:for (int i = 0; i < K-1 ; i++) {
                #pragma HLS PIPELINE
                T temp = (i < K - 2) ? linebuf[i+1][img_col] : in_val;
                linebuf[i][img_col] = temp;
            }
        }
    }
    std::cout << "count_img:" <<count_img << "\n";
    std::cout << "count_conv1:" <<count_conv1<<"\n";
}

void conv1(int padding,int width, int height, hls::stream<data_t> &src_img, hls::stream<data_t> &dst_img) {
    #pragma HLS DATAFLOW
    data_t kernel[16][3][3] = {{{0.26878357, 0.13682392, 0.14143483},{0.041244872, -0.056742575, 0.07255097},{-0.20083077, -0.06319027, 0.19562164}},
                              {{0.262159, 0.048926,0.113912},{0.134031, 0.049518, -0.01861},{0.233836,0.225131,0.216009}},
                              {{0.170158, 0.323119, 0.083648},{-0.0418,-0.01711,0.104751},{0.092267,-0.04681,0.068806}},
                              {{-0.07462,-0.00294,0.052896},{0.080241,0.201689,0.012011},{0.093008,0.165827,0.066039}},
                              {{0.144896,0.365466,0.175033},{0.133105,-0.05184,0.028626},{-0.12203,-0.08221,-0.21684}},
                              {{0.053726,-0.16872,-0.20054},{0.175617,-0.01545,-0.19214},{0.373429,0.280117,-0.18149}},
                              {{0.152278, -0.13943,0.045464},{-0.22118,-0.18075,-0.10976},{0.133282,-0.08897,-0.01688}},
                              {{-0.30172,-0.44044,-0.02828},{0.410465,-0.18189,0.471532},{-0.13206,-0.4399,-0.18287}},
                              {{0.110461, -0.0077,0.019517},{0.515985,-0.02636,0.061304},{0.019339,0.022866,0.124711}},
                              {{0.136073,0.120423,0.214156},{-0.00825,0.077444,0.220693},{0.010431,0.052618,0.044809}},
                              {{-0.23956,-0.29566,-0.29709},{-0.13178, 0.143908,0.090842},{-0.58858,-0.03457,0.398524}},
                              {{0.143174,-0.03095,-0.24716},{0.045321,-0.01908,-0.17395},{-0.10383,-0.08255,-0.16143}},
                              {{-0.51567,-0.29,-0.03668},{0.225079,0.018415,-0.07848},{0.291674,0.216459,0.10563}},
                              {{-0.43961,-0.02349,0.056404},{-0.24579,0.030505,0.272878},{-0.05315,0.191454,0.248561}},
                              {{-0.30465,0.135672,0.381617},{-0.22824,0.128932,0.206503},{-1.05318,-0.27693,-0.36825}},
                              {{0.092631,0.026808,0.078882},{-0.03647,0.607406,-0.02246},{-0.01523,0.162064,0.018575}}};

    sp_conv1<data_t>(padding, width, height, src_img, kernel, dst_img);

}

void pool1(int width, int height, hls::stream<data_t> &in_pl1, hls::stream<data_t> &out_pl1) {
    data_t pool_buf[NUM_FILTERS_1][CONV1_WIDTH];
    data_t pool_win[NUM_FILTERS_1][K - 1][K - 1];
    int count_pool1 =0;
    for (int pool_row = 0; pool_row < height; pool_row++) {
        for (int pool_col = 0; pool_col < width; pool_col++) {
            #pragma HLS PIPELINE
            for (int num_filters = 0; num_filters < NUM_FILTERS_1; num_filters++) {
                data_t temp = 0;
                data_t in_pool_val = in_pl1.read();
                
                if (pool_row >= K - 2) {
                    for (int pool_win_row = 0; pool_win_row < POOL_SIZE; pool_win_row++) {
                        for (int pool_win_col = 0; pool_win_col < POOL_SIZE; pool_win_col++) {
                            #pragma HLS PIPELINE
                            if (pool_win_row < K - 2) {
                                pool_win[num_filters][pool_win_row][pool_win_col] = (pool_win_col < K - 2) ? pool_win[num_filters][pool_win_row][pool_win_col + 1] : pool_buf[num_filters][pool_col];
                            } else if (pool_win_row == K - 2) {
                                pool_win[num_filters][pool_win_row][pool_win_col] = (pool_win_col < K - 2) ? pool_win[num_filters][pool_win_row][pool_win_col + 1] : in_pool_val;
                            }
                        }
                    }

                    if (pool_col % (K - 1) == 1 && pool_row % (K - 1) == 1) {
                        for (int pool_win_row = 0; pool_win_row < POOL_SIZE; pool_win_row++) {
                            for (int pool_win_col = 0; pool_win_col < POOL_SIZE; pool_win_col++) {
                                #pragma HLS PIPELINE
                                if (temp <= pool_win[num_filters][pool_win_row][pool_win_col]) {
                                    temp = pool_win[num_filters][pool_win_row][pool_win_col];
                                }
                            }
                        }
                        out_pl1 << temp;
                        count_pool1 ++;
                    }
                }
                pool_buf[num_filters][pool_col] = in_pool_val;
            }
        }
    }
    std::cout << "count_pool1:" <<count_pool1<<"\n";
}

template<typename T>
void sp_conv2( int padding,int width, int height, hls::stream<T> &src,T ker[NUM_FILTERS_2][NUM_KERNEL_2][K][K], hls::stream<T> &dst) {
    height = height + 2*padding;
    width  = width + 2*padding;
    int count_conv2=0;
    T linebuf[NUM_FILTERS_1][K - 1][POOL1_WIDTH+2];
    #pragma HLS ARRAY_PARTITION variable=linebuf complete dim=1
    T win[NUM_FILTERS_1][K][K];
    #pragma HLS ARRAY_PARTITION variable=win complete dim=0
    #pragma HLS ARRAY_PARTITION variable=ker complete dim=0
    #pragma HLS INLINE // Into a DATAFLOW region
    T data[NUM_FILTERS_2];
     ImgH:for (int img_row = 0; img_row < height; img_row++) {
        ImgW:for (int img_col = 0; img_col < width; img_col++) {
            data[NUM_FILTERS_2] = {0,0,0,0,0,0,0,0};
            Filter1:for(int num_fil1 =0;num_fil1<NUM_FILTERS_1;num_fil1++){
            #pragma HLS DEPENDENCE variable=linebuf inter false 
            #pragma HLS PIPELINE
            T in_val;
            if (img_row == 0 || img_col == 0 || img_row == (IMG_HEIGHT+1) || img_col == (IMG_WIDTH+1)) {
                in_val = 0;
            } else {
                in_val = src.read();
            }

            if (img_row >= K - 1){

            // Shift values in the window horizontally
            
             ShiftWindowH:for (int win_row = 0; win_row < K; win_row++) {
                 ShiftWindowW:for (int win_col = 0; win_col < K; win_col++) {
                    #pragma HLS PIPELINE
                    if (win_row < K - 1) {
                        win[num_fil1][win_row][win_col] = (win_col < K - 1) ? win[num_fil1][win_row][win_col + 1] : linebuf[num_fil1][win_row][img_col];
                    } else if (win_row == K - 1) {
                        win[num_fil1][win_row][win_col] = (win_col < K - 1) ? win[num_fil1][win_row][win_col + 1] : in_val;
                    }
                }
            }
            
            // Convolution operation
            Filters:for (int num_fil2 = 0; num_fil2 < NUM_FILTERS_2; num_fil2++) {
                Conv:if (img_col >= K - 1) {
                    ConvH:for (int win_row = 0; win_row < K; win_row++) {
                        ConvW:for (int win_col = 0; win_col < K; win_col++) {
                            #pragma HLS PIPELINE
                            data[num_fil2] += win[num_fil1][win_row][win_col] * ker[num_fil2][num_fil1][win_row][win_col];
                        }
                    }
                   // data += bias_conv1[num_filters];  

                }
            }
        }

            // Shift values in line buffer vertically
            ShiftLineBuffer:for (int i = 0; i < K-1 ; i++) {
                #pragma HLS PIPELINE
                T temp = (i < K - 2) ? linebuf[num_fil1][i+1][img_col] : in_val;
                linebuf[num_fil1][i][img_col] = temp;
            }
        }
        // luu lan luot gia tri cua mang vao dst
        if ((img_row >= K - 1) && (img_col >= K - 1)){
            for(int i=0;i<NUM_FILTERS_2;i++){
                    dst << relu(data[i]);
                    count_conv2 ++;
                }
            }
        }
    }
   // std::cout << "count_img:" <<count_img << "\n";
    std::cout << "count_conv2:" <<count_conv2<<"\n";
}

void conv2(int padding,int width, int height, hls::stream<data_t> &src_conv1, hls::stream<data_t> &dst_conv1) {
    #pragma HLS DATAFLOW
    data_t filter2[8][16][3][3]={
   {{0.07273936, -0.4111135, -0.11626549, 0.19088306, 0.058223616, 0.1612115, -0.16880684, 0.35868388, 0.15313713},
    {-0.10574598, 0.097547546, 0.058818877, 0.019247998, 0.26469117, 0.45675012, 0.23918061, -0.08529963, -0.29574096},
     {0.07586547, 0.24459076, 0.23164128, -0.08262343, -0.014487933, 0.24224436, 0.1898924, -0.16547948, 0.17131545},
 {-0.034043297, 0.010445793, 0.17320788, 0.24280047, 0.07373474, 0.00822266, -0.24939516, -0.03382742, -0.08909547},
  {-0.17235059, 0.031535633, -0.090031914, 0.07954458, 0.1374946, -0.17287274, -0.1493946, 0.23036154, 0.21029773}, 
  {0.08365076, -0.08021379, 0.029389858, -0.076179855, -0.19640921, -0.001806298, 0.23553243, 0.40517497, 0.27204287},
 {0.082667165, 0.34077042, 0.32729733, 0.13329314, 0.42268646, 0.24134344, -0.016896514, 0.21791051, 0.17328876},
  {0.5586765, -0.17794064, -0.2974193, 0.010439136, 0.047228348, 0.38832626, 0.023109447, 0.08630763, 0.45960966}, 
  {0.4870827, 0.09225523, 0.5142676, -0.06507398, -0.21922745, 0.21413195, 0.2901637, 0.359187, -0.19063121},
{-0.042649668, 0.020970728, -0.20297004, 0.046022113, -0.040887352, 0.07739335, 0.17505646, 0.10506018, 0.1434134}, 
{-0.06836764, -0.090291776, 0.09525665, 0.091301784, -0.14604957, -0.019618064, 0.04560201, -0.20159295, -0.16150141}, 
{0.14298376, 0.26355597, 0.26839396, 0.025773192, 0.2949594, 0.11569369, 0.053415038, 0.49671486, 0.30525678},
{-0.11055673, 0.2542392, -0.05855822, 0.31646803, -0.19795913, -0.053526945, 0.13745785, 0.25328693, 0.42615214}, 
{0.26525593, 0.025548495, 0.34558135, 0.096563056, 0.11322127, -0.008633714, -0.076796025, -0.28039944, 0.18996187},
 {0.11677513, 0.26521313, -0.16230308, -0.10632752, -0.18454826, 0.03705296, 0.14654814, 0.22890238, 0.09512449},
 {0.18483488, -0.101981886, 0.12799445, 0.15219127, 0.000503782, -0.0465659, 0.042106405, 0.283328, 0.009069005}},

  {{0.31119472, 0.099487044, 0.12187184, 0.13823257, -0.14826384, 0.27856058, 0.15381975, 0.08085032, 0.07949439},
  {0.16023865, 0.32705182, 0.21557802, -0.14766404, -0.07798066, 0.16160232, 0.10574562, -0.06369266, 0.23868269},
  {0.16224, 0.08943523, 0.093274325, 0.008104569, 0.1504513, 0.14870642, 0.012361674, -0.042415544, 0.5876399},
  {-0.22108765, -0.24991187, -0.07518717, 0.05455084, 0.20875446, 0.081609584, 0.15869516, 0.16219848, -0.11814364},
  {0.120632276, -0.13402168, 0.049270485, 0.07432354, 0.031625208, 0.08375874, 0.14528, -0.16863647, -0.21323214},
  {-0.12604247, -0.04664223, -0.14030226, 0.12782186, 0.15689889, 0.11717408, 0.09348421, -0.17008315, 0.13142617},
  {-0.322402, 0.16687983, 0.19347365, 0.16841151, 0.14381988, -0.02682227, -0.078115985, -0.029773455, -0.16157185},
  {0.14203574, 0.04109825, 0.043723285, -0.079912804, 0.17822766, 0.02972116, -0.04831003, -0.08762326, 0.38648352},
  {0.07875993, 0.13029264, 0.250713, 0.007536609, -0.17393878, -0.15676579, -0.20129436, 0.101273395, -0.076048926},
  {0.2321013, 0.06989416, -0.08173011, 0.120565526, -0.049518414, 0.21364866, 0.12541525, -0.034013897, 0.13095143},
  {-0.12033921, 0.17218101, 0.033284087, -0.10915689, -0.42784196, 0.060616758, -0.07479309, 0.26304302, 0.26680604},
  {0.08957724, -0.29401788, 0.4571023, -0.038319625, 0.3018618, 0.18527791, -0.009265489, -0.028225398, 0.2145242},
  {-0.00365056, -0.15755428, -0.052992087, 0.2894477, -0.061071943, 0.25347915, 0.20059289, 0.18899786, 0.05678695},
  {0.076589, 0.046839252, 0.17745611, 0.1550824, -0.001293067, 0.02625883, 0.1329811, -0.28386837, -0.08102263},
  {-0.21092516, 0.11159341, 0.07836902, 0.1570474, 0.06627138, 0.09911358, -0.14839111, 0.007585511, 0.06131665},
  {0.10042295, -0.008318746, 0.10937238, 0.21524888, -0.13980988, -0.015373645, 0.03944358, -0.26045567, -0.042795483}},

  {{0.23672445, -0.03528955, -0.024829928, -0.04453121, -0.032239992, -0.15547207, 0.10370124, -0.00333502, 0.04831624},
  {-0.16204007, -0.26290157, -0.16111428, -0.10499785, 0.001578279, 0.21057902, -0.035087958, 0.04440681, -0.061042394},
  {0.10051943, -0.045805767, 0.04973399, 0.15535292, -0.029077053, 0.16819084, 0.0939472, 0.13266528, 0.104758404},
  {0.33281314, -0.110575125, 0.121302664, 0.4880451, 0.23779428, 0.03508858, -0.077104636, 0.09901835, 0.066677324},
  {0.17370504, -0.16279113, -0.045538854, 0.25244135, 0.19984785, 0.031670365, 0.45736796, 0.028772281, -0.29455262},
  {0.030866481, 0.11556195, 0.17304973, 0.1240987, -0.06829294, 0.03925774, 0.06493057, 0.25545666, -0.22398047},
  {0.14112936, -0.039784774, 0.09849586, 0.006099527, 0.09594724, -0.07087664, 0.034388393, 0.13973112, -0.042312216},
  {0.10211399, 0.21803536, -0.024448048, 0.17151318, -0.008071573, -0.031491425, 0.11033708, 0.06317212, 0.3346405},
  {0.3076028, 0.09003585, 0.37735948, 0.20080397, -0.3032482, 0.10362404, 0.44746998, 0.30922514, 0.11445391},
   {-0.018863216, 0.10411548, 0.0632744, 0.25772968, 0.10097408, -0.047265593, 0.45478678, 0.33661437, 0.15284306},
  {0.3338622, -0.10468985, -0.22167684, -0.21424693, 0.40001878, 0.29539287, 0.13859835, -0.059251573, 0.1509878},
  {0.13045909, 0.051413253, -0.09605798, 0.0509931, -0.030498639, 0.05114683, -0.027859716, 0.0446385, -0.040668428},
  {0.057187658, -0.19965664, -0.009523946, 0.037599057, 0.13713701, -0.22424656, 0.1761845, 0.14201967, -0.035728972},
  {0.04565431, -0.009603341, 0.058789153, 0.30691752, 0.116500005, 0.06703083, -0.005476173, -0.17887934, 0.026898248},
  {0.18328494, 0.15440851, 0.07647551, -0.13222615, 0.08095315, 0.08599525, -0.07317392, 0.034808338, -0.08837599},
  {0.055163443, 0.06656766, 0.057639785, -0.004336465, 0.03773942, -0.27748123, -0.055841587, 0.15817676, 0.096016854}},

  {{0.072480835, -0.044510998, 0.12133748, 0.090137295, -0.04560355, 0.025987215, -0.08372009, -0.0767404, -0.029787133},
  {-0.1764563, -0.075140014, 0.040281903, -0.10287848, -0.09352449, -0.33416507, -0.08180557, 0.13520457, 0.10486741},
  {-0.09419467, -0.18023017, 0.11372773, -0.022764288, 0.07705276, -0.18665518, -0.05404499, -0.12530701, -0.15561295},
   {-0.022157716, -0.099978216, -0.1036855, -0.19173361, 0.04793466, 0.016660687, 0.01388531, -0.05712358, 0.027473375},
  {0.14571455, -0.076002285, 0.17898664, -0.2763545, 0.051143806, 0.1468116, -0.08515013, 0.010555419, 0.027085144},
  {0.017322935, -0.077968165, -0.036700048, 0.12888834, 0.09014379, -0.003383512, -0.014409438, -0.015287328, 0.014160416},
  {-0.02178373, 0.04821041, 0.20721807, -0.120417595, 0.19811532, -0.06800795, 0.12715463, -0.3173433, 0.05200355},
  {0.10474687, 0.017502755, 0.14190827, 0.07415314, -0.12528779, 0.039141342, -0.040658116, 0.021828517, -0.046301175},
  {0.14982562, -0.042417202, 0.05605248, -0.06515907, 0.0468804, 0.06150261, 0.072589405, 0.14989437, 0.0943417}, 
  {-0.060741812, -0.13957606, 0.011848209, 0.1907773, -0.01811333, 0.050650157, 0.12731983, 0.06886616, -0.040346205},
  {0.09413001, 0.10836847, -0.12704897, 0.00227288, 0.13810356, 0.1070723, 0.13390617, 0.1229799, 0.06264357},
  {0.08407856, -0.20714225, 0.14365762, -0.050524008, 0.14237368, 0.32764617, -0.026272906, 0.0983646, -0.08800801}, 
  {0.31140673, -0.14351803, -0.06675531, 0.25887874, 0.07829318, 0.041623216, 0.20094694, 0.06647447, -0.13355775},
  {0.2316895, 0.092391886, 0.30412534, 0.19836017, -0.033993296, 0.26151377, 0.072783016, 0.09765544, -0.010555696},
  {-0.07913067, 0.27228925, -0.051451914, 0.10411125, 0.10129012, 0.087592684, 0.04706876, 0.07872757, -0.12918313},
  {0.10577304, 0.13978747, 0.24191119, -0.14798468, -0.11828865, -0.10490896, -0.020323355, -0.066438325, 0.067419864}},

  {{0.18697897, -0.489194, -0.25277442, 0.045150213, 0.022552568, 0.15362133, 0.34118843, 0.089745425, 0.097206324},
  {-0.4125002, -0.15781821, -0.049165014, -0.11511337, -0.020934923, 0.08428845, 0.006904567, 0.18005097, -0.051381394},
  {0.23279874, 0.21913865, -0.36330864, 0.21168369, 0.26575637, 0.15888122, 0.047403224, -0.19695151, 0.20708573},
  {0.4119873, -0.09600405, 0.21948692, -0.015456422, 0.16351192, -0.28335443, 0.24776669, 0.15813036, 0.07757574},
  {-0.031924535, -0.13414074, 0.09003635, 0.121111386, -0.2219917, -0.1479668, 0.37803262, 0.32022643, -0.25225958},
  {0.14481395, 0.35284987, 0.02524062, 0.07638281, 0.13190196, 0.14343278, -0.061457377, -0.041258994, -0.18713216},
  {0.30486166, 0.04887895, 0.13410893, 0.029257396, -0.09929686, -0.040386897, 0.16594939, 0.033403758, 0.0336621},
  {-0.051684037, -0.06759269, -0.024585564, 0.18026598, 0.13609622, 0.09050666, -0.10382185, 0.031773586, 0.058967624},
  {0.012789433, 0.022961235, 0.18021335, 0.50953346, -0.20370822, 0.11475791, -0.34530595, 0.14732374, -0.19439754}, 
  {-0.07436796, 0.12041519, 0.06314009, 0.09636482, -0.08568479, -0.04511419, 0.2512488, -0.0451148, 0.000481216},
  {0.22034368, 0.23684728, -0.31178257, 0.23462752, -0.05486646, 0.06413216, -0.03592463, 0.14078046, 0.02429482},
  {-0.069861665, 0.09869165, 0.050610412, 0.49903697, 0.01632898, -0.012361769, 0.055817384, 0.17598176, 0.13853246}, 
  {0.2579163, 0.007370027, 0.053027198, 0.048919447, -0.092703596, 0.17728534, 0.15329242, 0.14566141, 0.10988511},
  {-0.003235664, 0.17367178, 0.11649316, -0.11212492, -0.006975667, 0.2013965, 0.22499713, -0.054154087, 0.05105317},
  {-0.10997522, 0.004214385, -0.08192131, 0.11858287, 0.064166375, 0.26762947, 0.18900481, 0.09192674, 0.06639443},
  {0.31082383, 0.09946469, 0.278681, -0.20954277, 0.23625337, -0.16012186, -0.0779615, 0.045991916, -0.004379062}},

  { {-0.058514368, 0.023826558, 0.06407365, 0.24176368, 0.092111014, 0.17739692, 0.33399007, 0.22965726, 0.30665866},
  {0.03770395, 0.15448707, 0.36841944, 0.003560352, 0.109486535, 0.028879968, 0.16571426, -0.07756764, 0.16865686},
  {-0.09319687, 0.13588285, -0.05908757, 0.11664636, 0.29536426, 0.14624539, -0.03097377, 0.10342483, 0.2907831},
   {0.12169814, 0.0651024, 0.154597, -0.105915256, 0.001242504, 0.26994687, -0.038845915, -0.14266692, -0.14508389},
  {0.13174587, -0.2081606, 0.12653916, 0.11550622, 0.037099686, -0.036837712, 0.2801255, 0.086157694, 0.089400165},
  {0.11406052, -0.092618845, 0.0885186, 0.013646394, -0.00452626, 0.017331574, -0.11862404, -0.075213455, 0.17926905},
  {0.1774926, 0.18663959, 0.13926719, 0.0820278, -0.15240316, 0.12441171, 0.11602978, -0.13488343, 0.21091893},
  {0.056064438, 0.009550034, 0.038795214, -0.13260601, 0.071638025, -0.1827683, 0.15933318, 0.2781639, 0.18957712},
  {0.057176612, -0.054557726, 0.19040275, 0.11173666, 0.109707244, -0.22365388, 0.11275523, 0.08355745, -0.1431695},
  {0.118994705, -0.16616116, 0.1190134, -0.11035551, -0.008643026, 0.30822796, 0.112574816, 0.10746159, 0.17916399},
  {0.19640753, 0.3116467, 0.27926666, 0.18551515, 0.14204699, 0.03815339, 0.034355346, -0.12826091, 0.098855756},
  {0.06266574, -0.10722961, -0.039132643, 0.10424981, 0.14978045, 0.001629371, 0.008372845, -0.23912962, 0.064116284},
  {-0.012856726, 0.20145181, 0.18798205, 0.15868634, -0.12610407, 0.13860255, 0.12099587, -0.118514374, -0.039426457},
  {0.26078278, 0.2587897, 0.089695424, 0.011092878, -0.028327353, 0.22677633, 0.40496355, -0.03885143, 0.111705616},
  {-0.1924008, 0.216598, -0.2520573, 0.09221835, 0.06381834, -0.08968288, -0.13225701, 0.21093372, 0.24133909},
  {0.19466947, 0.106021516, 0.13614102, 0.08425839, 0.15005553, 0.062473547, 0.005014549, 0.054804575, 0.12827797}},

  {{-0.050498735, -0.17451505, 0.012723125, -0.08530315, -0.14311561, 0.032538112, -0.07898851, -0.083690606, -0.11737068},
  {-0.10135303, 0.1364969, 0.09302538, -0.050614383, -0.16669187, -0.03657955, -0.047216725, -0.04071686, -0.08435178},
  {0.065487884, -0.010913078, -0.000523507, 0.043852482, -0.03639021, -0.085510574, 0.07500686, -0.11796984, -0.037300386},
  {0.052317515, -0.15313356, -0.16362438, -0.08833207, 0.0794545, 0.14030352, -0.060897153, -0.09352329, 0.08717626},
  {-0.14696294, 0.027977025, -0.022594051, 0.010491085, 0.050442833, -0.122238636, 0.07871403, -0.18284951, -0.00721488},
  {0.02140253, -0.11161143, -0.048696242, -0.18142244, -0.15552706, 0.074464, 0.12691408, 0.04081094, -0.002183991},
  {-0.048163455, -0.08083041, -0.16932671, -0.043437064, -0.07828645, -0.11007388, 0.11465853, 0.09377382, 0.14270747},
  {-0.09101929, 0.0681592, 0.11222062, -0.18293904, -0.013710903, -0.1428251, -0.20337518, -0.07960312, -0.19651034},
  {-0.18330674, -0.0481232, 0.14145492, -0.047876082, 0.115902826, -0.02293271, 0.02791415, -0.18046436, 0.08158512}, 
   {0.08607513, 0.06525777, -0.032589413, 0.018051865, -0.028600793, -0.06303514, -0.018851629, -0.06181545, -0.15896882},
  {0.1362908, -0.017799657, -0.16483189, 0.022985436, -0.009336934, 0.09026821, 0.09116569, -0.041703355, -0.015097334},
  {0.12503493, -0.12058679, 0.11140705, -0.04468151, -0.09764991, 0.006728492, -0.11400197, 0.043288637, -0.13209884}, 
  {-0.019429812, 0.067975126, 0.09836477, 0.004578114, 0.030744335, 0.13116896, -0.010386758, -0.09915574, 0.06644255},
  {0.037512973, 0.054296862, 0.084198706, -0.11356787, -0.1416526, -0.18346795, -0.09544509, -0.18794489, 0.09810467},
  {-0.101310566, 0.025270125, 0.052694213, -0.07031738, -0.03926442, -0.16145873, -0.08681223, 0.11826391, 0.007429635},
   {0.023736836, 0.062669456, 0.059714336, -0.08905915, -0.12859206, -0.19852665, -0.08443968, 0.01860165, 0.001904406}
},

{{0.2513255, 0.09718115, 0.18008718, 0.084324464, 0.25022158, -0.020569649, 0.57322866, 0.1851626, 0.29006967},
  {-0.043781128, 0.12845676, 0.28303266, -0.10463468, -0.0489615, 0.006664777, 0.16896002, 0.124033056, -0.09663704},
  {0.08067117, 0.1737464, 0.268395, -0.021621058, 0.13588594, 0.18181792, 0.19019395, -0.019884817, 0.37404698}, 
  {0.03081351, -0.21353462, 0.124792956, 0.16937712, 0.10844402, 0.079343416, -0.015317456, 0.036769114, -0.040845305},
  {0.15971877, -0.19861756, -0.009745234, 0.29223633, -0.047279093, 0.20413475, -0.011214954, -0.19444986, -0.2425638},
  {0.029585836, 0.022931214, 0.010485362, -0.07043735, -0.14773847, 0.15578847, 0.06195361, 0.25410005, 0.01800952}, 
  {0.4132959, 0.21935688, 0.10099794, -0.07273298, -0.14360867, 0.14118707, 0.3031122, -0.12313836, -0.1960454},
  {0.043440036, 0.05563878, -0.06302829, 0.15697528, 0.06438442, 0.029920079, 0.13370667, 0.4570629, 0.19279836},
  {0.079386495, 0.09904086, 0.026254049, -0.007423353, -0.14364259, 0.12683065, 0.10726423, 0.06668678, 0.04134949},
  {-0.043567322, -0.038564783, 0.044591166, 0.07110281, 0.11862916, 0.17411011, 0.19065526, 0.10806554, 0.096226044},
  {0.13431719, 0.05209822, -0.036507785, 0.020809708, 0.15214401, 0.18843156, 0.28095406, -0.2521421, -0.33488035},
  {-0.12899525, 0.12395143, -0.042468384, 0.31019187, -0.053084016, -0.19695242, -0.13139921, -0.03234229, -0.1640368},
   {0.47240514, -0.12594628, -0.015282236, -0.09315117, 0.20060919, -0.08807821, -0.000628177, -0.06006371, 0.021772584},
  {0.14070597, 0.18690571, -0.011633155, 0.17002134, 0.23984113, -0.15454848, 0.123521395, 0.1787521, -0.045021385},
  {0.056975115, -0.04165116, -0.013864397, 0.004073757, -0.054234907, 0.004212011, -0.030146454, -0.14216684, 0.0593129},
  {-0.009426449, -0.013661123, 0.06446785, 0.07858565, -0.025933357, 0.22884853, -0.074847765, 0.13717866, 0.009457402}},
};

    sp_conv2<data_t>(padding, width, height, src_conv1, filter2, dst_conv1);

}

void full(hls::stream<data_t> &full_in,hls::stream<data_t> &full_out){
    
    hls::stream<data_t> conv1_out("conv1_out");
        hls::stream<data_t> pool1_out("pool1_out");
    conv1(1,IMG_WIDTH, IMG_HEIGHT,full_in, conv1_out);
    //sp_conv1<data_t>(IMG_WIDTH, IMG_HEIGHT, src_img, filters, conv1_out);
        //     while (!conv1_out.empty()) {
        //     data_t value = conv1_out.read();
        //     std::cout << value << "\t";
        // }

    // for(int n=0;n<NUM_FILTERS;n++){
    //     for (int i = 0; i < CONV1_HEIGHT; i++) {
    //         for (int j = 0; j < CONV1_WIDTH; j++) {
    //             data_t pix_val = (i * CONV1_WIDTH + j);
    //             conv1_out << pix_val;
    //         }
    //     }
    // }

   pool1(IMG_WIDTH,IMG_HEIGHT,conv1_out,full_out);
    //pool1(CONV1_WIDTH,CONV1_HEIGHT,full_in,full_out);
   // conv2(1,POOL1_WIDTH,POOL1_HEIGHT,pool1_out,full_out);

}
