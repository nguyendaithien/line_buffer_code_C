// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="filter3x3_orig_filter3x3_orig,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-2-i,HLS_INPUT_CLOCK=6.660000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.611000,HLS_SYN_LAT=70,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1657,HLS_SYN_LUT=1349,HLS_VERSION=2021_2}" *)

module filter3x3_orig (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        image_r_TDATA,
        image_r_TVALID,
        image_r_TREADY,
        output_r_TDATA,
        output_r_TVALID,
        output_r_TREADY
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] image_r_TDATA;
input   image_r_TVALID;
output   image_r_TREADY;
output  [31:0] output_r_TDATA;
output   output_r_TVALID;
input   output_r_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_convolution_int_3_s_fu_56_ap_start;
wire    grp_convolution_int_3_s_fu_56_ap_done;
wire    grp_convolution_int_3_s_fu_56_ap_idle;
wire    grp_convolution_int_3_s_fu_56_ap_ready;
wire    grp_convolution_int_3_s_fu_56_image_r_TREADY;
wire   [31:0] grp_convolution_int_3_s_fu_56_output_r_TDATA;
wire    grp_convolution_int_3_s_fu_56_output_r_TVALID;
wire    grp_convolution_int_3_s_fu_56_output_r_TREADY;
reg    grp_convolution_int_3_s_fu_56_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    regslice_both_output_r_U_apdone_blk;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    regslice_both_image_r_U_apdone_blk;
wire   [31:0] image_r_TDATA_int_regslice;
wire    image_r_TVALID_int_regslice;
reg    image_r_TREADY_int_regslice;
wire    regslice_both_image_r_U_ack_in;
wire    output_r_TREADY_int_regslice;
wire    regslice_both_output_r_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 grp_convolution_int_3_s_fu_56_ap_start_reg = 1'b0;
end

filter3x3_orig_convolution_int_3_s grp_convolution_int_3_s_fu_56(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_convolution_int_3_s_fu_56_ap_start),
    .ap_done(grp_convolution_int_3_s_fu_56_ap_done),
    .ap_idle(grp_convolution_int_3_s_fu_56_ap_idle),
    .ap_ready(grp_convolution_int_3_s_fu_56_ap_ready),
    .image_r_TDATA(image_r_TDATA_int_regslice),
    .image_r_TVALID(image_r_TVALID_int_regslice),
    .image_r_TREADY(grp_convolution_int_3_s_fu_56_image_r_TREADY),
    .output_r_TDATA(grp_convolution_int_3_s_fu_56_output_r_TDATA),
    .output_r_TVALID(grp_convolution_int_3_s_fu_56_output_r_TVALID),
    .output_r_TREADY(grp_convolution_int_3_s_fu_56_output_r_TREADY)
);

filter3x3_orig_regslice_both #(
    .DataWidth( 32 ))
regslice_both_image_r_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(image_r_TDATA),
    .vld_in(image_r_TVALID),
    .ack_in(regslice_both_image_r_U_ack_in),
    .data_out(image_r_TDATA_int_regslice),
    .vld_out(image_r_TVALID_int_regslice),
    .ack_out(image_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_image_r_U_apdone_blk)
);

filter3x3_orig_regslice_both #(
    .DataWidth( 32 ))
regslice_both_output_r_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_convolution_int_3_s_fu_56_output_r_TDATA),
    .vld_in(grp_convolution_int_3_s_fu_56_output_r_TVALID),
    .ack_in(output_r_TREADY_int_regslice),
    .data_out(output_r_TDATA),
    .vld_out(regslice_both_output_r_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_convolution_int_3_s_fu_56_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_convolution_int_3_s_fu_56_ap_start_reg <= 1'b1;
        end else if ((grp_convolution_int_3_s_fu_56_ap_ready == 1'b1)) begin
            grp_convolution_int_3_s_fu_56_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_convolution_int_3_s_fu_56_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((regslice_both_output_r_U_apdone_blk == 1'b1)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (regslice_both_output_r_U_apdone_blk == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (regslice_both_output_r_U_apdone_blk == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        image_r_TREADY_int_regslice = grp_convolution_int_3_s_fu_56_image_r_TREADY;
    end else begin
        image_r_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_convolution_int_3_s_fu_56_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (regslice_both_output_r_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'b0;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_convolution_int_3_s_fu_56_ap_start = grp_convolution_int_3_s_fu_56_ap_start_reg;

assign grp_convolution_int_3_s_fu_56_output_r_TREADY = (output_r_TREADY_int_regslice & ap_CS_fsm_state3);

assign image_r_TREADY = regslice_both_image_r_U_ack_in;

assign output_r_TVALID = regslice_both_output_r_U_vld_out;

endmodule //filter3x3_orig
